AWSTemplateFormatVersion: 2010-09-09

Description: |
  Capstone Project CloudFormation Servers Deployment.
  - Launch Configuration and Group
  - Application Load Balancer
  - Bastion Host
  - IAM Service Role
  - Security Group

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names.
    Type: String
    Default: capstone

  # EKSROLE:
  #   Description: Role Assigned to the EKS Cluster
  #   Type: String
  #   Default: arn:aws:iam::447919180571:role/capstoneEKSServiceRole

  # EKSNODEGROUPROLE:
  #   Description: Role Assigned to the EKS NodeGroup
  #   Type: String
  #   Default: arn:aws:iam::447919180571:role/capstoneNodeInstanceRole

Resources:
  ClusterInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref ClusterRole

  ClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
        - arn:aws:iam::aws:policy/ElasticLoadBalancingFullAccess
  CapstoneEKS:
    Type: AWS::EKS::Cluster
    Properties:
      Version: "1.25"
      RoleArn: !GetAtt ClusterRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - Fn::ImportValue: capstone-SCG
        SubnetIds:
          - Fn::ImportValue: capstone-PUBSUBNET1
          - Fn::ImportValue: capstone-PUBSUBNET2

  # EKSSECURITUGROUP:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: EKS Cluster Security Group
  #     Tags:
  #       - Key: Environment
  #         Value: !Ref EnvironmentName
  #       - Key: Name
  #         Value: !Sub ${EnvironmentName}-WEBSERVERGROUP
  #       - Key: "kubernetes.io/cluster/EKSCLUSTER"
  #         Value: "shared"
  #     VpcId:
  #       Fn::ImportValue: capstone-VPC

  # EKSSECURITUGROUPINGRESS:
  #   Type: AWS::EC2::SecurityGroupIngress
  #   Properties:
  #     GroupId: !Ref EKSSECURITUGROUP
  #     IpProtocol: tcp
  #     FromPort: 0
  #     ToPort: 65535
  #     SourceSecurityGroupId: !Ref EKSSECURITUGROUP
  #     Tags:
  #       - Key: "kubernetes.io/cluster/EKSCLUSTER"
  #         Value: "shared"
  #       - Key: "kubernetes.io/role/internal-elb"
  #         Value: 1
  #       - Key: "kubernetes.io/role/elb"
  #         Value: 1

  # EKSCLUSTER:
  #   Type: "AWS::EKS::Cluster"
  #   Properties:
  #     Name: EKSCLUSTER
  #     Version: "1.26"
  #     RoleArn: !Ref EKSROLE
  #     ResourcesVpcConfig:
  #       SecurityGroupIds:
  #         - !Ref EKSSECURITUGROUP
  #       SubnetIds:
  #         - Fn::ImportValue: capstone-PUBSUBNET1
  #         - Fn::ImportValue: capstone-PUBSUBNET2

  # EKSNODEGROUP:
  #   Type: "AWS::EKS::Nodegroup"
  #   Properties:
  #     ClusterName: !Ref EKSCLUSTER
  #     NodeRole: !Ref EKSNODEGROUPROLE
  #     ScalingConfig:
  #       MinSize: 2
  #       DesiredSize: 4
  #       MaxSize: 6
  #     Subnets:
  #       - Fn::ImportValue: capstone-PUBSUBNET1
  #       - Fn::ImportValue: capstone-PUBSUBNET2

Outputs:
  EksId:
    Description: The EKS id.
    Value: !Ref CapstoneEKS
    Export:
      Name: !Sub ${EnvironmentName}-EKS

  EKSRoleArn:
    Description: The role that Amazon EKS will use to create AWS resources for Kubernetes clusters
    Value: !GetAtt ClusterRole.Arn
    Export:
      Name: !Sub "${EnvironmentName}-EKSRoleArn"
