version: 2.1

jobs:
  test-lint:
    docker:
      - image: circleci/python:3.6.7-stretch
    working_directory: ~/repo
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install --no-cache-dir -r requirements.txt
            curl -sL -o hadolint "https://github.com/hadolint/hadolint/releases/latest/download/hadolint-$(uname -s)-$(uname -m)"
            sudo install hadolint /usr/local/bin/
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run lints!
      - run:
          name: Run lint
          command: |
            . venv/bin/activate
            make lint

  upload-docker:
    docker:
      - image: circleci/golang:1.15
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build docker image
          command: |
            docker build --tag=uda-final .
            docker image ls
      - run:
          name: Upload image to dockerhub
          command: |
            DOCKER_PATH=dienpp/uda-final
            echo $DOCKERHUB_PASSWORD | docker login --username $DOCKERHUB_USERNAME --password-stdin
            docker tag uda-final $DOCKER_PATH:$CIRCLE_WORKFLOW_ID
            docker push $DOCKER_PATH:$CIRCLE_WORKFLOW_ID

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      # - run:
      #     name: Ensure EKS network exists
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file .circleci/files/network.yml \
      #         --tags project=uda-capstone \
      #         --stack-name "eks-network-${CIRCLE_WORKFLOW_ID:0:7}" \
      #         --region ${AWS_DEFAULT_REGION}
      # - run:
      #     name: Ensure EKS Cluster exists
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file .circleci/files/eks.yml \
      #         --tags project=uda-capstone \
      #         --stack-name "eks-cluster-${CIRCLE_WORKFLOW_ID:0:7}" \
      #         --region ${AWS_DEFAULT_REGION} \
      #         --capabilities CAPABILITY_NAMED_IAM
      - run:
          name: Ensure Nodegroup exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/node-group.yml \
              --tags project=uda-capstone \
              --stack-name "eks-nodegroup-${CIRCLE_WORKFLOW_ID:0:7}" \
              --region ${AWS_DEFAULT_REGION} \
              --capabilities CAPABILITY_NAMED_IAM
      # - run:
      #     name: Ensure management instances exists
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file cloudformation/management.yml \
      #         --tags project=${ENVIRONMENT_NAME}-project \
      #         --stack-name "${ENVIRONMENT_NAME}-eks-management" \
      #         --region ${AWS_DEFAULT_REGION} \
      #         --parameter-overrides file://cloudformation/management-parameters.json \
      #         --output text >> ~/checkIfDeployed.txt
      #       cat ~/checkIfDeployed.txt
      # - run:
      #     name: Extract the IPs of the management instances for Ansible
      #     command: |
      #       echo [management] > ~/inventory.txt
      #       aws ec2 describe-instances \
      #         --region "${AWS_DEFAULT_REGION}" \
      #         --query 'Reservations[*].Instances[*].PublicIpAddress' \
      #         --filters "Name=tag:Name,Values=${ENVIRONMENT_NAME}-management*" \
      #         --output text >> ~/inventory.txt
      #       cat ~/inventory.txt
      # - persist_to_workspace:
      #     root: ~/
      #     paths:
      #       - inventory.txt
      #       - checkIfDeployed.txt

  # configure-infrastructure:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints:
  #           - "d4:2f:91:66:b5:0d:84:24:4a:09:2c:d6:8a:c1:0f:91"
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update ansible
  #     - run:
  #         name: Configure server
  #         command: |
  #           if grep -q "No changes to deploy" ~/checkIfDeployed.txt
  #             then
  #               cat ~/inventory.txt
  #               echo "Our management instances are already configured."
  #             else
  #               cat ~/inventory.txt
  #               cd ansible
  #               ansible-playbook -i ~/inventory.txt configure-server.yml
  #             fi

  # configure-cluster:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints:
  #           - "d4:2f:91:66:b5:0d:84:24:4a:09:2c:d6:8a:c1:0f:91"
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update ansible
  #     - run:
  #         name: Configure server
  #         command: |
  #           if grep -q "No changes to deploy" ~/checkIfDeployed.txt
  #             then
  #               cat ~/inventory.txt
  #               echo "Our management instances are already configured."
  #             else
  #               cat ~/inventory.txt
  #               cd ansible
  #               ansible-playbook -i ~/inventory.txt configure-cluster.yml
  #             fi
  #     - run:
  #         name: Wait for LoadBalancer's domain to become reachable
  #         command: |
  #           if grep -q "No changes to deploy" ~/checkIfDeployed.txt
  #             then
  #               cat ~/inventory.txt
  #               echo "Our management instances are already configured."
  #             else
  #               cat ~/inventory.txt
  #               echo "Wait 60 seconds..."
  #               sleep 60
  #             fi
  #     - run:
  #         name: Display the LoadBalancer's DNS name
  #         command: |
  #           cat ~/inventory.txt
  #           cd ansible
  #           ansible-playbook -i ~/inventory.txt save-elb-dns.yml
  #           cat ~/elb_dns.txt
  #     - persist_to_workspace:
  #         root: ~/
  #         paths:
  #           - elb_dns.txt

  # deploy-docker:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints:
  #           - "d4:2f:91:66:b5:0d:84:24:4a:09:2c:d6:8a:c1:0f:91"
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update ansible
  #     - run:
  #         name: Deploy newest Docker Image
  #         command: |
  #           cat ~/inventory.txt
  #           cd ansible
  #           ansible-playbook -i ~/inventory.txt deploy-app.yml
  #         no_output_timeout: 2m

workflows:
  default:
    jobs:
      - test-lint
      - upload-docker:
          requires:
            - test-lint
          filters:
            branches:
              only:
                - master
      - deploy-infrastructure:
          filters:
            branches:
              only:
                - master
      # - configure-infrastructure:
      #     requires:
      #       - deploy-infrastructure
      # - configure-cluster:
      #     requires:
      #       - configure-infrastructure
      #       - upload-docker
      # - deploy-docker:
      #     requires:
      #       - configure-cluster